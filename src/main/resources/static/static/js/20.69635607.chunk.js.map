{"version":3,"sources":["components/Canvas/BlockSelect/Location.js","lib/custom/hooks/useLazyImageObserver.js"],"names":["Block","styled","li","BlockDiv","div","Img","img","TextArea","InfoButton","button","props","status","css","Location","location","onClick","idx","isSelect","useState","modalOpen","setModalOpen","image","locationId","type","name","address1","src","imageSrc","setImageSrc","imageRef","useRef","useEffect","observer","IntersectionObserver","isIntersecting","unobserve","current","threshold","observe","disconnect","useLazyImageObserver","OpenModal","console","log","setLatLng","sysLocStore","ref","onError","e","target","handleImgError","alt","className","ModalModule","modalIsOpen","closeModal","header","title","blockSelect","isSel","BlockInfo","id","memo"],"mappings":"mMASMA,EAAQC,IAAOC,GAAV,uNAYLC,EAAWF,IAAOG,IAAV,qUAmBRC,EAAMJ,IAAOK,IAAV,2GAOHC,EAAWN,IAAOG,IAAV,kIAORI,EAAaP,IAAOQ,OAAV,4XAkBZ,SAACC,GAAD,OACAA,EAAMC,QACNC,YADA,gMAYEC,EAAW,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SAAe,EACvBC,oBAAS,GADc,mBAClDC,EADkD,KACvCC,EADuC,KAEjDC,EAA4CP,EAA5CO,MAAOC,EAAqCR,EAArCQ,WAAYC,EAAyBT,EAAzBS,KAAMC,EAAmBV,EAAnBU,KAAMC,EAAaX,EAAbW,SAFkB,ECnFpD,YAAwC,IAARC,EAAO,EAAPA,IAAO,EACZR,mBACL,qBAFiB,mBACrCS,EADqC,KAC3BC,EAD2B,KAItCC,EAAWC,iBAAO,MAuBxB,OArBAC,qBAAU,WACR,IAAIC,EAeJ,OAdIH,IACFG,EAAW,IAAIC,sBACb,YAAa,oBACDC,iBACRN,EAAYF,GACZM,EAASG,UAAUN,EAASO,YAGhC,CAAEC,UAAW,CAAC,QAGPC,QAAQT,EAASO,SAGrB,WACLJ,GAAYA,EAASO,WAAWV,MAEjC,CAACA,EAAUF,EAAUD,IAEjB,CAAEC,WAAUE,YD2DYW,CAAqB,CAAEd,IAAKL,IAAnDM,EAHiD,EAGjDA,SAAUE,EAHuC,EAGvCA,SAEZY,EAAY,WAChBrB,GAAa,GACbsB,QAAQC,IAAIxB,IAMNyB,EAAcC,cAAdD,UAMR,OACE,mCACG9B,GACC,qCACE,eAACd,EAAD,WACE,qBACEe,QAAS,WACP0B,IACAG,EAAUtB,EAAYC,EAAKA,OAH/B,SAME,cAAClB,EAAD,CACEqB,IAAKC,EACLmB,IAAKjB,EACLkB,QAAS,SAACC,GAAD,OAlBA,SAACA,GACtBA,EAAEC,OAAOvB,IA9FkC,oBA+GfwB,CAAeF,IAC/BG,IAAI,UAGR,eAAC5C,EAAD,WACE,eAACJ,EAAD,CACEY,QAAS,WACP0B,IACAG,EAAUtB,EAAYC,EAAKA,OAH/B,UAME,qBAAK6B,UAAU,OAAf,SAAuB5B,IACvB,qBAAK4B,UAAU,UAAf,SAA0B3B,OAE5B,cAACjB,EAAD,CACEG,OAAQM,EACRF,QAAS,kBAAMA,EAAQD,EAAUE,IAFnC,SAIGC,EAAW,eAAO,uBAIzB,cAACoC,EAAA,EAAD,CACEC,YAAanC,EACboC,WA/CS,WACjBnC,GAAa,IA+CLoC,OAAQhC,EACRiC,MAAOjC,EACPkC,YAAa,kBAAM3C,EAAQD,EAAUE,IACrC2C,MAAO1C,EAAW,eAAO,eAN3B,SAQE,cAAC2C,EAAA,EAAD,CAAWrC,KAAMA,EAAKA,KAAMsC,GAAIvC,YAQ7BwC,yBAAKjD","file":"static/js/20.69635607.chunk.js","sourcesContent":["import React, { memo, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport ModalModule from 'components/common/modal/ModalModule';\r\nimport { sysLocStore } from '../../../lib/zustand/planStore';\r\nimport BlockInfo from '../BlockInfo/BlockInfo';\r\nimport { useLazyImageObserver } from 'lib/custom/hooks/useLazyImageObserver';\r\n\r\nconst DEFAULT_IMAGE = process.env.PUBLIC_URL + '/images/face3.png';\r\n\r\nconst Block = styled.li`\r\n  list-style: none;\r\n  margin: 13px;\r\n  border: 1px solid #e5e7e8;\r\n  border-radius: 10px;\r\n  padding: 12px;\r\n  background: #ffffff;\r\n  width: 252px;\r\n  height: 134px;\r\n  display: flex;\r\n`;\r\n\r\nconst BlockDiv = styled.div`\r\n  cursor: pointer;\r\n  margin-left: 5px;\r\n  font-weight: bold;\r\n  .name {\r\n    font-weight: 800;\r\n    font-size: 13px;\r\n    line-height: 16px;\r\n  }\r\n  .address {\r\n    font-weight: 400;\r\n    font-size: 9px;\r\n    line-height: 11px;\r\n    color: #7e7e7e;\r\n    margin-top: 2px;\r\n    height: 35px;\r\n  }\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 110px;\r\n  height: 110px;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TextArea = styled.div`\r\n  padding-left: 18px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst InfoButton = styled.button`\r\n  width: 100px;\r\n  height: 25px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n  text-align: center;\r\n  z-index: 0;\r\n  background: #ffffff;\r\n  border: 1px solid #e5e7e8;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  :hover {\r\n    background: black;\r\n    color: white;\r\n    transition: 0.3s linear;\r\n  }\r\n  ${(props) =>\r\n    props.status &&\r\n    css`\r\n      background: black;\r\n      color: white;\r\n      :hover {\r\n        background: white;\r\n        color: black;\r\n        transition: 0.3s linear;\r\n      }\r\n    `}\r\n`;\r\n\r\nconst Location = ({ location, onClick, idx, isSelect }) => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const { image, locationId, type, name, address1 } = location;\r\n  const { imageSrc, imageRef } = useLazyImageObserver({ src: image });\r\n\r\n  const OpenModal = () => {\r\n    setModalOpen(true);\r\n    console.log(modalOpen);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n  const { setLatLng } = sysLocStore();\r\n\r\n  const handleImgError = (e) => {\r\n    e.target.src = DEFAULT_IMAGE;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {location && (\r\n        <>\r\n          <Block>\r\n            <div\r\n              onClick={() => {\r\n                OpenModal();\r\n                setLatLng(locationId, type.type);\r\n              }}\r\n            >\r\n              <Img\r\n                src={imageSrc}\r\n                ref={imageRef}\r\n                onError={(e) => handleImgError(e)}\r\n                alt=\"img\"\r\n              />\r\n            </div>\r\n            <TextArea>\r\n              <BlockDiv\r\n                onClick={() => {\r\n                  OpenModal();\r\n                  setLatLng(locationId, type.type);\r\n                }}\r\n              >\r\n                <div className=\"name\">{name}</div>\r\n                <div className=\"address\">{address1}</div>\r\n              </BlockDiv>\r\n              <InfoButton\r\n                status={isSelect}\r\n                onClick={() => onClick(location, idx)}\r\n              >\r\n                {isSelect ? '취소' : '선택'}\r\n              </InfoButton>\r\n            </TextArea>\r\n          </Block>\r\n          <ModalModule\r\n            modalIsOpen={modalOpen}\r\n            closeModal={closeModal}\r\n            header={name}\r\n            title={name}\r\n            blockSelect={() => onClick(location, idx)}\r\n            isSel={isSelect ? '취소' : '선택'}\r\n          >\r\n            <BlockInfo type={type.type} id={locationId} />\r\n          </ModalModule>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(Location);\r\n","import { useEffect, useRef, useState } from 'react';\r\n\r\nexport function useLazyImageObserver({ src }) {\r\n  const [imageSrc, setImageSrc] = useState(\r\n    process.env.PUBLIC_URL + '/images/face3.png',\r\n  );\r\n  const imageRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let observer;\r\n    if (imageRef) {\r\n      observer = new IntersectionObserver(\r\n        ([entry]) => {\r\n          if (entry.isIntersecting) {\r\n            setImageSrc(src);\r\n            observer.unobserve(imageRef.current);\r\n          }\r\n        },\r\n        { threshold: [0.25] },\r\n      );\r\n\r\n      observer.observe(imageRef.current);\r\n    }\r\n\r\n    return () => {\r\n      observer && observer.disconnect(imageRef);\r\n    };\r\n  }, [imageRef, imageSrc, src]);\r\n\r\n  return { imageSrc, imageRef };\r\n}\r\n"],"sourceRoot":""}